function [ExcitedHarm, N, NewDefFreq] = HarmMultisine(DefFreq, Nblock, Spacing, TypeMulti);%%       function [ExcitedHarm, N] = HarmMultisine(DefFreq, Nblock, Spacing, TypeMulti);%%       calculates the harmonic content of an odd or full random harmonic grid multisine signal%       with a linear or a logarithmic spacing in the band defined by [fmin, fmax]%       for a lowpass design%           fmin = fres/2	for odd multisines%           fmin = fres     for full multisines%       where%           fres =          the frequency spacing between two consecutive odd harmonics for odd multisines %           fres =          the frequency spacing between two consecutive harmonics for full multisines %%%   OUTPUT%%       ExcitedHarm     =   excited frequencies of the multisine expressed in harmonic numbers%%       N               =   number of time domain samples in one period%%       NewDefFreq      =   struct containing the information about the sampling frequency, frequency resolution,%                           and the excited frequency band {'fs', 'fmin', 'fmax', 'fres', 'frat'}%                               NewDefFreq.fs      =    sampling frequency of the generator (remains unchanged!)%                               NewDefFreq.fres    =    frequency spacing in Hz between the (odd) harmonics %                                                       fres is modified such that fs/fres is an integer number%                                                       Note: not all (odd) harmonics are excited; especially for the log spacing%                               NewDefFreq.fmin    =    lowest excited frequency in Hz%                                                       fmin is modified such that fmin/fres is an (odd) integer number%                                                       (for lowpass design fmin = fres/2)%                               NewDefFreq.fmax    =    largest excited frequency in Hz%                                                       fmax is modified such that fmax/fres is an (odd) integer number%%   INPUT%%       DefFreq         =   struct containing the information about the sampling frequency, frequency resolution,%                           and the excited frequency band {'fs', 'fmin', 'fmax', 'fres', 'frat'}%                               DefFreq.fs      =   sampling frequency of the generator%                               DefFreq.fres    =   frequency spacing in Hz between the (odd) harmonics %                               DefFreq.fmin    =   lowest excited frequency in Hz%                                                   (for lowpass design fmin = fres/2)%                               DefFreq.fmax    =   largest excited frequency in Hz%                               DefFreq.frat    =   ratio between consecutive (odd) harmonics for a logarithmic frequency spacing%%       Nblock          =   size of the group of consecutive (odd) harmonics where one is randomly eliminated%                           warning: for full multisines Nblock should be even; %                                    if not even the smallest even number larger than Nblock is selected %%       Spacing         =   linear or logarithmic frequency spacing; optional parameter (default = 'linear') %                               'lin', 'linear':       linear frequency spacing%                               'log', 'logarithmic':  quasi logarithmic frequency spacing (rounded to DFT grid)%%       TypeMulti       =   type multisine; optional (default = 'odd')%                               'odd':   odd random harmonic grid multisine        %                               'full':  full random harmonic grid multisine %% Rik Pintelon, March 2006% version December 4, 2007%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% initialize the variables %%%%%%%%%%%%%%%%%%%%%%%%%%%%%fs = DefFreq.fs;fres = DefFreq.fres;fmin = DefFreq.fmin;fmax = DefFreq.fmax;if isfield(DefFreq, 'frat')	if ~isempty(DefFreq.frat)        frat = DefFreq.frat;	end % if not emptyend % if isfield% type of the frequency spacingif nargin == 2    Spacing = 'lin';end % ifSpacing = lower(Spacing);% type of the multisineif nargin <= 3    TypeMulti = 'odd';end % ifTypeMulti = lower(TypeMulti);if strcmp(TypeMulti, 'full')   if (Nblock -end % if%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% calculation odd random harmonic grid %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%if strcmp(TypeMulti, 'odd')    fres = fres/2;                  % frequency spacing between odd and even harmonicsend % if odd multisineN = ceil(fs/fres);                  % number of time domain points in one periodfres = fs/N;FreqSpan = floor(fmax/fres);        % frequency span for a lowpass signal% calculate the (odd) random harmonic numbers for a lowpass signalswitch Spacing        case {'lin', 'linear'}						ExcitedHarm = lintone(FreqSpan, Nblock, TypeMulti);		    case {'log', 'logarithmic'}        ExcitedHarm = logtone(FreqSpan, frat, Nblock, TypeMulti);        end % switch Spacing% convert lowpass in bandpassFirstNonZeroHarm = ceil(fmin/fres);RemoveHarm = find(ExcitedHarm < FirstNonZeroHarm);ExcitedHarm(RemoveHarm) = [];%%%%%%%%%%%%%%%%%%%%%%%%% realised frequencies %%%%%%%%%%%%%%%%%%%%%%%%%NewDefFreq.fs = fs;NewDefFreq.fres = fres;if strcmp(TypeMulti, 'odd')    NewDefFreq.fres = 2*NewDefFreq.fres;       % frequency spacing between the odd harmonicsend % if odd multisineNewDefFreq.fmin = ExcitedHarm(1)*fres;NewDefFreq.fmax = ExcitedHarm(end)*fres;