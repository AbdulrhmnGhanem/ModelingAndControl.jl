function ExcitedHarm = lintone(FreqSpan, Nblock, TypeMulti);%%	ExcitedHarm = lintone(FreqSpan, Nblock, TypeMulti);%%		(odd) multisine with linear frequency distribution and randomly%		distributed (odd) detection lines: one (odd) harmonic out of%		Nblock consecutive harmonics is left out%%	OUTPUT PARAMETERS%%		ExcitedHarm		= vector containing the excited harmonics%%	INPUT PARAMETERS%%		FreqSpan		=	ratio fmax/fmin% 		Nblock			=	number of lines per block%                           if Nblock = Inf then no detection lines are present %       TypeMulti       =	type multisine; optional (default = 'odd')%                               'odd':   odd random harmonic grid multisine        %                               'full':  full random harmonic grid multisine %% Johan Schoukens and Rik Pintelon, September 2003% Version February 6, 2008%% type of the multisineif nargin == 2    TypeMulti = 'odd';end % ifTypeMulti = lower(TypeMulti);% selection of the frequency spanswitch TypeMulti        case 'odd', Fmax = FreqSpan/2;    case 'full', Fmax = FreqSpan;        end % switch% resolution of the frequency axis = fmin => total number of frequencies = FreqSpan = fmax/fminExcitedHarm = [1:Fmax].';if ~isinf(Nblock)    NEmpty = floor((Fmax-Nblock)/Nblock);			% number of detection lines     ss = floor(Nblock*rand(NEmpty+1,1)) + 1;        % random choice of integer numbers from 1:1:Nblock    dummy = [0:NEmpty]'*Nblock + ss;    ExcitedHarm(dummy) = [];end % if not Nblock = Infif strcmp(TypeMulti, 'odd')    ExcitedHarm = 2*ExcitedHarm - 1;			% no even harmonicsend % if odd multisine