function ExcitedHarm = logtone(FreqSpan, FreqRatio, Nblock);%%	ExcitedHarm = logtone(FreqSpan, FreqRatio, Nblock);%%		odd multisine with logaritmic frequency distribution and randomly%		distributed odd detection lines.%		calculates a logarithmic distributed frequency grid of odd harmonics%		where one odd harmonic out of Nblock consecutive harmonics is left out		%%	OUTPUT PARAMETERS%%		ExcitedHarm		= vector containing the excited harmonics%%	INPUT PARAMETERS%%		FreqSpan		= ratio fmax/fmin%		FreqRatio		= ratio consecutive odd frequencies in logtone% 		Nblock			= number of lines per block%% Johan Schoukens and Rik Pintelon, September 2003%% resolution of the frequency axis = fmin % => total number of frequencies on the linear grid = FreqSpan = fmax/fminfreqv = [1:FreqSpan/2]; 						% divide by two because only odd harmonics are consideredExcitedHarm = lin2log(freqv, FreqRatio);		% generates a full quasi log frequency gridNlog = length(ExcitedHarm);NEmpty = floor((Nlog-Nblock)/Nblock);			% number of detection lines ss = ceil(Nblock*rand(NEmpty+1,1));% % always excite the first harmonic% if ss(1) == 1% 	ss(1) = 2;% enddummy = [0:NEmpty]'*Nblock+ss;ExcitedHarm(dummy) = [];ExcitedHarm = ExcitedHarm*2-1;					% no even harmonics