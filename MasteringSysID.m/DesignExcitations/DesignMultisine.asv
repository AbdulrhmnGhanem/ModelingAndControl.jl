function [ExcitedHarm, N] = HarmMultisine(fs, fr, fmin, fmax, Nblock, Spacing);%%       function [ExcitedHarm, N] = HarmMultisine(fs, fres, fmin, fmax, Nblock, Spacing);%%       calculates the harmonic content of a odd multisine signal with%       a linear or a logarithmic spacing%%%   OUTPUT%%       ExcitedHarm     = excited harmonics of the multisine expressed in harmonic numbers%       N               = number of time domain samples in one period%%   INPUT%%       fs              =   sampling frequency%       fr              =   Linear spacing:%                               frequency spacing in Hz between the odd harmonics %                               should be chosen such that fs/fres is an integer number%                           Logarithmic spacing:%                               ratio consecutive odd harmonics%       fmin            =   lowest excited frequency in Hz%                           should be chosen such that fmin/fres is an integer number%       fmax            =   largest frequency in Hz%                           should be chosen such that fmin/fres is an integer number%       Nblock          =   size of the group of consecutive odd harmonics where one is randomly eliminated%       Spacing         =   linear or logarithmic frequency spacing%                               'linear':       linear spacing%                               'logarithmic':  logarithmic spacing%% Rik Pintelon, November 2006%fr = fr/2;                      % frequency spacing between odd and even harmonicsN = fs/fr;                        % number of time domain points in one period% calculate the odd random harmonic numbers for a lowpass signalFreqSpan = ceil(fmax/fres);ExcitedHarm = lintone(FreqSpan, Nblock);% convert lowpass in bandpassFirstNonZeroHarm = ceil(fmin/fres);RemoveHarm = find(ExcitedHarm < FirstNonZeroHarm);ExcitedHarm(RemoveHarm) = [];