### A Pluto.jl notebook ###
# v0.19.27

using Markdown
using InteractiveUtils

# ‚ïî‚ïê‚ï° 0128b83c-986d-11ee-38be-2fd8b3ac03a0
# ‚ï†‚ïê‚ï° show_logs = false
begin
    # If you are running this notebook as a stannalone notebook disable this cell.
    import Pkg
    Pkg.activate(joinpath("..", ".."))
end


# ‚ïî‚ïê‚ï° 4b1d5b72-2d3b-4c7e-a456-1beace344605
using Random, Plots, DSP, StatsBase

# ‚ïî‚ïê‚ï° ea5e2791-aef5-42ed-a3a1-57c5a9afd616
md"# Exercise 12.a: The effect of filtering input noise with (varying cutoff frequency)

!!! purpose
	Show the effects of white noise on the measurements, and how filtering can introduce a bias in the identified system.

	* On removing current noise `n·µ¢` the bais disappears for all configurations.
	* Removing the voltage noise doesn't affect the bias in these configurations.

	LS ‚Üí is baised due to the noise on the input `n·µ¢` (filtering the input doesn't have an effect when using LS).

	IV ‚Üí is more complicated. For the white noise situation, no bias is visible. However, once the output noise is filtered, a bias becomes visible. The relative bias is proportional to the ratio of the autocorrelation functions of the noise and the current `R‚Çô·µ¢‚Çô·µ¢(s)/R·µ¢‚ÇÄ·µ¢‚ÇÄ(s)` üëáÔ∏è

	![Textbook](https://i.imgur.com/Dcovnk3.png)
"

# ‚ïî‚ïê‚ï° 2432fede-195f-4f21-9c56-2bedc88eecff
function butter(n, wn)
    h = digitalfilter(Lowpass(wn), Butterworth(n))
    tf = convert(PolynomialRatio, h)
    coefb(tf), coefa(tf)
end

# ‚ïî‚ïê‚ï° 12f567b2-1eb7-44ff-be4d-0f47c54e7a51
begin
    N = 5000
    N·µ£ = 10_000
    R‚ÇÄ = 1000
    i‚Çò‚Çê‚Çì = 0.01
    f_gen = 0.05
    f‚Çô = [0.4995, 0.475, 0.3]
    N‚Çú·µ£‚Çê‚Çô‚Çõ = 1000

    b_gen, a_gen = butter(1, 2f_gen)
    i‚ÇÄ =
        randn(N + N‚Çú·µ£‚Çê‚Çô‚Çõ, 1) |>
        prev ->
            filt(b_gen, a_gen, prev) |>
            prev -> prev[N‚Çú·µ£‚Çê‚Çô‚Çõ+1:end] |> prev -> prev * i‚Çò‚Çê‚Çì / std(prev)

    u‚ÇÄ = R‚ÇÄ * i‚ÇÄ

    lag = 1

    LS = zeros(N·µ£, length(f‚Çô))
    IV = zeros(N·µ£, length(f‚Çô))

    for r = 1:length(f‚Çô)
        b, a = butter(2, 2f‚Çô[r])

        for s = 1:N·µ£
            n·µ§ = randn(N)
            n·µ¢ =
                randn(N + N‚Çú·µ£‚Çê‚Çô‚Çõ) |>
                prev ->
                    filt(b, a, prev) |>
                    prev -> prev[N‚Çú·µ£‚Çê‚Çô‚Çõ+1:end] |> prev -> prev / std(prev) * i‚Çò‚Çê‚Çì

            i = i‚ÇÄ + n·µ¢
            u = u‚ÇÄ + n·µ§

            LS[s, r] = i \ u

            iShift = copy(i)
            deleteat!(iShift, 1:lag)
            deleteat!(i, N-lag+1:N)
            deleteat!(u, N-lag+1:N)

            IV[s, r] = (u' * iShift) / (iShift' * i)
        end

    end
end

# ‚ïî‚ïê‚ï° 8256a5bc-9706-4a1c-b723-6937d81eb803
stephist(
    [LS IV];
    normalize = :pdf,
    xlims = (0, 1550),
    ylims = (0, 0.101),
    xlabel = "R (Œ©)",
    ylabel = "PDF",
    labels = reshape(
        [
            "LS (f‚Çô = $(f‚Çô[1]))",
            "LS (f‚Çô = $(f‚Çô[2]))",
            "LS (f‚Çô = $(f‚Çô[3]))",
            "IV (f‚Çô = $(f‚Çô[1]))",
            "IV (f‚Çô = $(f‚Çô[2]))",
            "IV (f‚Çô = $(f‚Çô[3]))",
        ],
        1,
        :,
    ),
)

# ‚ïî‚ïê‚ï° Cell order:
# ‚ï†‚ïê0128b83c-986d-11ee-38be-2fd8b3ac03a0
# ‚ï†‚ïê4b1d5b72-2d3b-4c7e-a456-1beace344605
# ‚ïü‚îÄea5e2791-aef5-42ed-a3a1-57c5a9afd616
# ‚ïü‚îÄ2432fede-195f-4f21-9c56-2bedc88eecff
# ‚ï†‚ïê12f567b2-1eb7-44ff-be4d-0f47c54e7a51
# ‚ïü‚îÄ8256a5bc-9706-4a1c-b723-6937d81eb803
